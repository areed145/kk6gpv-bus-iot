{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation BusIot Class that listens for new IoT observations on_connect ( self , client , userdata , flags , rc ) Subscribe to MQTT eventstream Source code in bus_iot/bus_iot.py def on_connect ( self , client , userdata , flags , rc ): \"\"\" Subscribe to MQTT eventstream \"\"\" print ( \"Connected with result code\" + str ( rc )) client . subscribe ( \"eventstream/raw\" ) on_message ( self , client , userdata , msg ) Parse MQTT message Source code in bus_iot/bus_iot.py def on_message ( self , client , userdata , msg ): \"\"\" Parse MQTT message \"\"\" message = msg . payload . decode ( \"utf-8\" ) message = json . loads ( message ) ins = message [ \"event_data\" ][ \"new_state\" ] msg = {} msg [ \"type\" ] = \"iot\" msg [ \"timestamp\" ] = datetime . now ( timezone . utc ) . isoformat () msg [ \"sensor\" ] = ins [ \"entity_id\" ] msg [ \"state\" ] = ins [ \"state\" ] msg [ \"uom\" ] = ins [ \"attributes\" ][ \"unit_of_measurement\" ] try : client . publish ( \"kk6gpv_bus/iot/\" + str ( msg [ \"sensor\" ]), json . dumps ( msg ), retain = True , ) except Exception : pass","title":"Reference"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#bus_iot.bus_iot","text":"","title":"bus_iot.bus_iot"},{"location":"#bus_iot.bus_iot.BusIot","text":"Class that listens for new IoT observations","title":"BusIot"},{"location":"#bus_iot.bus_iot.BusIot.on_connect","text":"Subscribe to MQTT eventstream Source code in bus_iot/bus_iot.py def on_connect ( self , client , userdata , flags , rc ): \"\"\" Subscribe to MQTT eventstream \"\"\" print ( \"Connected with result code\" + str ( rc )) client . subscribe ( \"eventstream/raw\" )","title":"on_connect()"},{"location":"#bus_iot.bus_iot.BusIot.on_message","text":"Parse MQTT message Source code in bus_iot/bus_iot.py def on_message ( self , client , userdata , msg ): \"\"\" Parse MQTT message \"\"\" message = msg . payload . decode ( \"utf-8\" ) message = json . loads ( message ) ins = message [ \"event_data\" ][ \"new_state\" ] msg = {} msg [ \"type\" ] = \"iot\" msg [ \"timestamp\" ] = datetime . now ( timezone . utc ) . isoformat () msg [ \"sensor\" ] = ins [ \"entity_id\" ] msg [ \"state\" ] = ins [ \"state\" ] msg [ \"uom\" ] = ins [ \"attributes\" ][ \"unit_of_measurement\" ] try : client . publish ( \"kk6gpv_bus/iot/\" + str ( msg [ \"sensor\" ]), json . dumps ( msg ), retain = True , ) except Exception : pass","title":"on_message()"}]}